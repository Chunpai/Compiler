NAME
    eval

FILE
    /home/hoover/u3/cwang64/cs254/hwk07/python_LC/eval.py

DESCRIPTION
    #Author: Chunpai Wang
    #email: cwang64@u.rochester.edu
    #implementation of Lambda Calculus with python language

CLASSES
    Apply
    Expr
    Lambda

    class Apply
     |  # Apply class
     |  # Apply is the function application
     |  # M1 is the first function, and M2 is the second function
     |  # Example: Apply(M1,M2)  will create an Apply instance with M1 and M2 as function applications
     |
     |  Methods defined here:
     |
     |  __init__(self, M1, M2)

    class Expr
     |  # Expr class
     |  # Expr can do binary operation, and it has three parameters
     |  # first paramter op is the operators, which can be '+','-','*','/'
     |  # E1 and E2 are expression, which can be number, parameter, and function Application (Apply instance)
     |  # Example1: Expr('+',1,2)
     |  # Example2: Expr('+','x',1)
     |
     |  Methods defined here:
     |
     |  __init__(self, op, E1, E2)

    class Lambda
     |  # Lambda class
     |  # Lambda class has two parameters, p and M.
     |  # p is the the parameter with string type and M is the function body, which can be number, string, Expr, Lambda, and Apply object
     |  # Example: Lambda('x','x')
     |
     |  Methods defined here:
     |
     |  __init__(self, p, M)

FUNCTIONS
    eval(obj, env={})
        # evaluate the lambda calculus
        # parameters: object and environment
        # object : can be number, string, Expr instance, Lambda instance,and Apply instance

    make_binary_op(op, value1, value2)
        # binary operation
        # parameter op is the operator
        # parameters value1 and value2 are the values of first operand and second operand, which can be any type of number
        # for unary operation -x, it needs syntax make_binary_op('-',0,x)

DATA
    count = 0
